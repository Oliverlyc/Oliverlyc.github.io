<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[数据结构学习笔记]]></title>
      <url>/2018/03/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>##树的定义<br>树：n&gt;0个节点构成的有限集合。<br>空树：n=0<br>非空树特性：</p>
<ul>
<li>特殊节点<strong>根</strong>，用<strong>r</strong>表示</li>
<li>其余节点分为互不相交的有限集，每个集合本身是一条树，成为<strong>子树</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel5.5中实现JWT认证]]></title>
      <url>/2018/03/26/Laravel5-5%E4%B8%AD%E5%AE%9E%E7%8E%B0JWT%E8%AE%A4%E8%AF%81/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[防止sQL注入的几种方法]]></title>
      <url>/2017/12/02/%E9%98%B2%E6%AD%A2sQL%E6%B3%A8%E5%85%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>SQL注入就是通过<strong>Web表单提交</strong>、<strong>所输入的域名</strong>、<strong>页面请求</strong>从中插入查询字符串，从而达到执行恶意SQL语句的命令。</p>
<h3 id="防止SQL注入的方法"><a href="#防止SQL注入的方法" class="headerlink" title="防止SQL注入的方法"></a>防止SQL注入的方法</h3><ol>
<li>使用<a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="external"><strong>正则表达式</strong></a>来过滤字符串    </li>
<li>使用<a href="http://php.net/manual/zh/function.htmlspecialchars.php" target="_blank" rel="external">htmlspecialchars()</a>函数将特殊字符转换为HTML实体    </li>
<li>PHP预处理    <blockquote>
<p>不要依赖前端js的过滤，因为firebug会禁用js<br>最好不要使用root用户连接数据库</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对于mysqli_fetch_(mysqli_resule::fetch_)函数的理解]]></title>
      <url>/2017/11/06/%E5%AF%B9%E4%BA%8Emysqli-fetch-mysqli-resule-fetch-%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[win10配置JAVA环境]]></title>
      <url>/2017/10/26/win10%E9%85%8D%E7%BD%AEJAVA%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Java的下载链接</a>，本教程默认安装路径：<code>C:\ProgramFiles\Java</code>。<br><a id="more"></a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol>
<li>在”此电脑”里右键选择”属性”选项<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java4.jpg" alt="">   </li>
<li>选择”高级系统设置”选项<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java2.jpg" alt=""></li>
<li>点击下面的”环境变量”的选项<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java3.jpg" alt=""></li>
<li>点击”系统变量”下的”新建”选项 <strong>Java_Home</strong>里面<strong>J</strong>和<strong>H</strong>大写<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java1.jpg" alt="">   </li>
<li>在”系统变量”中找到”Path”,并点击”编辑”<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java5.jpg" alt="">   </li>
<li>选择右边的”编辑文本”,将引号里面的全部复制引号里的 “<strong>%Java_Home%\bin;%Java_Home%\jre\bin;</strong>“ 到“变量值”栏的最前面，”确定”<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java6.jpg" alt=""><br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java7.jpg" alt="">   </li>
<li>在”系统变量”栏,”新建”,”变量名”为”<strong>CLASSPATH</strong>“,”变量值”为”<strong>.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar</strong>“<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_java/java8.jpg" alt=""></li>
<li>“win+R”,输入”CMD”,进入命令指示行  <blockquote>
<p>java -version<br>提示出现版本号则配置成功</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> note </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[php artisan migrate 执行问题]]></title>
      <url>/2017/10/06/php-artisan-migrate-%E6%89%A7%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在wamp环境下搭建Laravel框架,执行:php artisan migrate<br>出现错误:   </p>
<pre><code>E:\PHP\Project\learnlaravel5&gt;php artisan migrate

[Illuminate\Database\QueryException]

could not find driver (SQL: select * from information_schema.tables where table_schema = homestead and table_name =migrations)

[PDOException]
could not find driver   
</code></pre><p>解决方法:<br>找到<strong>php.ini</strong>文件<br>去掉<strong>extension=php_pdo_mysql.dll</strong>前面的分号</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL用户管理和权限设置]]></title>
      <url>/2017/10/04/MySQL%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="用户基本操作"><a href="#用户基本操作" class="headerlink" title="用户基本操作"></a>用户基本操作</h2><blockquote>
<p>注:设置权限时必须给出以下信息   </p>
<blockquote>
<p>要授予的权健<br>被授予访问权限的数据库或表<br>用户名     </p>
</blockquote>
<p>grant和revoke可以在几个层次上控制访问权限     </p>
<blockquote>
<p>所有权限使用 grant all 和 revoke all<br>整个数据库 使用*<br>特定库和表 使用on basename.table<br>特定列<br>特定存储过程</p>
<h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><p><code>mysql&gt; grant 权限 on 数据库.表 to 用户名@登录主机 identified by &quot;密码&quot;;</code><br>权限:<br>普通用户操作数据权限: select, delete, update, insert     </p>
<p>数据库开发人员: create, drop, show, alter, index(索引), all privileges(所有权限)  </p>
</blockquote>
<p>数据库.表:     </p>
<blockquote>
<p>所有数据库中所有表: *.*<br>特定数据库中特定表: basename.table   </p>
</blockquote>
<p>登录主机:  </p>
<blockquote>
<p>所有非本地主机: @’%’ (不包括localhost, <strong>慎用</strong>);<br>某个局域网下所有子网用户: @’192.168.0.%’;   </p>
</blockquote>
</blockquote>
<p><code>mysql&gt; flush privileges</code> //更新权限     </p>
<h3 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限"></a>回收权限</h3><blockquote>
<p>将 grant 替换为 revoke;</p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p><code>mysql&gt; use mysql;</code> //进入mysql库<br><code>mysql&gt; delete from user where User=&#39;用户名&#39; and Host=&#39;主机&#39;</code> //删除用户<br><code>mysql&gt; drop user 用户名</code> //这个命令也可以 mysql5之前的版本需要先revoke删除用户权限, 再删除用户<br><code>flush privileges</code> //更新权限   </p>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p><code>mysql&gt; update user set password=password(&#39;XXXXX&#39;) where User=&#39;用户名&#39; (and Host=&#39;主机&#39;);</code>  //修改特定用户(特定主机)的密码     </p>
</blockquote>
<p><code>mysql&gt; show grants for 用户名;</code> //查看用户权限   </p>
<p><code>mysql&gt; rename user 旧名字 to 新名字;</code> //mysql5之后可以使用, 之前的版本需要使用 <code>update</code> 更新表 </p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL常用命令行]]></title>
      <url>/2017/10/04/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 显示数据库</span></div><div class="line">mysql&gt; show databases;       </div><div class="line"><span class="comment"># 打开库</span></div><div class="line">mysql&gt; use <span class="string">'库名'</span>;    </div><div class="line"><span class="comment"># 显示数据库中的表       </span></div><div class="line">mysql&gt; show tables;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 显示表结构</span></div><div class="line">mysql&gt; describe <span class="string">'表名'</span>;</div><div class="line"><span class="comment"># 创建库   </span></div><div class="line">mysql&gt; create database <span class="string">'库名'</span>;    </div><div class="line"><span class="comment"># 创建表   </span></div><div class="line">mysql&gt; create table <span class="string">'表名'</span> (<span class="string">'字段设定列表'</span>);    </div><div class="line">CREATE TABLE 表名(</div><div class="line">    <span class="string">'id'</span> int(11) NOT NULL auto_increment,</div><div class="line">    <span class="string">'time'</span> datatime not null,</div><div class="line">    PRIMARY KEY (<span class="string">'id'</span>),</div><div class="line">    CONSTRAINT <span class="string">'外键名'</span> FOREIGN KEY (<span class="string">'字段名'</span>) REFERENCES 表名(<span class="string">'字段'</span>)</div><div class="line">) CHARSET=utf8;</div><div class="line"><span class="comment"># 查看当前安装的MySQL所支持的字符集</span></div><div class="line">mysql&gt; show charset;</div><div class="line"><span class="comment"># 删除库</span></div><div class="line">mysql&gt; drop databases <span class="string">'库名'</span>;     </div><div class="line"><span class="comment"># 查看字段编码    </span></div><div class="line">mysql&gt; show full columns from tbl_name;</div></pre></td></tr></table></figure>
<h2 id="对字段的操作"><a href="#对字段的操作" class="headerlink" title="对字段的操作"></a>对字段的操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 添加表字段   </span></div><div class="line">mysql&gt; alter table <span class="string">'表名'</span> add <span class="string">'字段名称'</span> <span class="string">'类型(长度)'</span> <span class="string">'是否为空'</span>;</div><div class="line">mysql&gt; alter table userlist add id int(10) not null; auto_increment primary key;     </div><div class="line"><span class="comment"># 修改表字段类型及指定为空或非空   </span></div><div class="line">mysql&gt; alter table <span class="string">'表名'</span> change <span class="string">'字段名称'</span> <span class="string">'字段名称'</span> <span class="string">'字段类型'</span> <span class="string">'是否允许非空'</span>;</div><div class="line"><span class="comment"># 修改字段字符集   </span></div><div class="line">mysql&gt; alter table <span class="string">'表名'</span> modify column <span class="string">'字段名'</span> <span class="string">'字段类型'</span> character <span class="built_in">set</span> <span class="string">'字符集'</span>;</div><div class="line"><span class="comment"># 删除字段</span></div><div class="line">mysql&gt; alter table <span class="string">'表名'</span> drop <span class="string">'字段名'</span>;</div><div class="line"><span class="comment"># 添加外键    </span></div><div class="line">mysql&gt; alter table 表名 add foreign key 外键名(外键字段名) references 表名(外键关联的字段名);    </div><div class="line"><span class="comment">#删除外键    </span></div><div class="line">mysql&gt; alter table 表名 drop foreign key 外键名;    </div><div class="line"><span class="comment"># 查看外键    </span></div><div class="line">mysql&gt; show create table 表名;</div></pre></td></tr></table></figure>
<h2 id="对表的操作"><a href="#对表的操作" class="headerlink" title="对表的操作"></a>对表的操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 显示表内字段的字符集</span></div><div class="line">mysql&gt; show full columns from <span class="string">'表名'</span>;</div><div class="line"><span class="comment"># 修改表的字符集</span></div><div class="line">mysql&gt; alter table user default character <span class="built_in">set</span> <span class="string">'字符集'</span>;</div><div class="line"><span class="comment"># 删除表</span></div><div class="line">mysql&gt; drop table <span class="string">'表名'</span>;</div></pre></td></tr></table></figure>
<h2 id="对数据的操作"><a href="#对数据的操作" class="headerlink" title="对数据的操作"></a>对数据的操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 增加记录</span></div><div class="line">mysql&gt; insert into <span class="string">'表名'</span> value(<span class="string">'张三'</span>,<span class="string">'男'</span>);</div><div class="line"><span class="comment"># 显示表内数据</span></div><div class="line">mysql&gt; select * from <span class="string">'表名'</span>; (*可以被替换为字段名,可以加<span class="built_in">where</span>)</div><div class="line"><span class="comment"># 修改记录</span></div><div class="line">mysql&gt; update <span class="string">'表名'</span> <span class="built_in">set</span> sex=<span class="string">'修改的数据'</span> <span class="built_in">where</span> name=<span class="string">'张三'</span>;</div><div class="line"><span class="comment"># 删除记录</span></div><div class="line">mysql&gt; delete from <span class="string">'表名'</span> <span class="built_in">where</span> name=<span class="string">'张三'</span>;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统各文件夹结构说明及用途]]></title>
      <url>/2017/10/02/Linux%E7%B3%BB%E7%BB%9F%E5%90%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E%E5%8F%8A%E7%94%A8%E9%80%94/</url>
      <content type="html"><![CDATA[<p>/bin 二进制可执行命令</p>
<p>/dev 设备特殊文件</p>
<p>/etc 系统管理和配置文件</p>
<p>/etc/rc.d 启动的配置文件和脚本</p>
<p>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示</p>
<p>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件</p>
<p>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br><a id="more"></a><br>/tmp 公用的临时文件存储点</p>
<p>/root 系统管理员的主目录（呵呵，特权阶级）</p>
<p>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。</p>
<p>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 /proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</p>
<p>/var 某些大文件的溢出区，比方说各种服务的日志文件     </p>
<p>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含:/usr/x11r6 存放x window的目录</p>
<pre><code>/usr/bin 众多的应用程序    

/usr/sbin 超级用户的一些管理程序       

/usr/doc linux文档    

/usr/include linux下开发和编译应用程序所需要的头文件   

/usr/lib 常用的动态链接库和软件包的配置文件     

/usr/man 帮助文档   

/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里      

/usr/local/bin 本地增加的命令    

/usr/local/lib 本地增加的库根文件系统 通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要经常改动，而且包括严格的文件和一个小的不经
</code></pre><blockquote>
<p>常改变的文件系统不容易损坏。 除了可能的一个叫/vmlinuz标准的系统引导映像之外，根目录一般不含任何文件。所有其他文件在根文件系统的子目录中。</p>
</blockquote>
<h2 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h2><ol>
<li><strong>/bin</strong>目录 /bin目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些命令都是二进制文件的可执行程序(bin是binary–二进制的简称)，</li>
</ol>
<p>多是系统中重要的系统文件。</p>
<ol>
<li><strong>/sbin</strong>目录 /sbin目录类似/bin，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般</li>
</ol>
<p>不给普通用户使用。</p>
<ol>
<li><p><strong>/etc</strong>目录/etc目录存放着各种系统配置文件，其中包括了用户信息文件/etc/passwd，系统初始化文件/etc/rc等。linux正是*这些文件才得以正常地运行。</p>
</li>
<li><p><strong>/root</strong>目录 /root 目录是超级用户的目录。 </p>
</li>
<li><p><strong>/lib</strong>目录/lib目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副本，故可以使得可执行文件变得更小，节省空间。</p>
</li>
<li><p><strong>/lib/modules</strong> 目录 /lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引导系统所需的模块(例如网络和文件系统驱动)。</p>
</li>
<li><p><strong>/dev</strong>目录/dev目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用户可以通过访问/dev/mouse来访问鼠标的输入，就像访问其他文件一样。</p>
</li>
<li><p><strong>/tmp</strong>目录/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。</p>
</li>
<li><p><strong>/boot</strong>目录/boot目录存放引导加载器(bootstraploader)使用的文件，如lilo，核心映像也经常放在这里，而不是放在根目录中。但是如果有许多核心映像，这个目录就可</p>
</li>
</ol>
<p>能变得很大，这时使用单独的文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在ide硬盘的前1024柱面内。</p>
<ol>
<li><p><strong>/mnt</strong>目录 /mnt目录是系统管理员临时安装(mount)文件系统的安装点。程序并不自动支持安装到/mnt。/mnt下面可以分为许多子目录，例如/mnt/dosa可能是使用msdos文件系统的软驱，而/mnt/exta可能是使用ext2文件系统的软驱，/mnt/cdrom光驱等等。</p>
</li>
<li><p><strong>/opt</strong> 这里主要存放那些可选的程序。你想尝试最新的firefox测试版吗？那就装到/opt目录下吧，这样，当你尝试完，想删掉firefox的时候，你就可以直接删除它，而不影响系统其他任何设置。安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。 举个例子：刚才装的测试版firefox，就可以装到/opt/firefox_beta目录下，/opt/firefox_beta目录下面就包含了运行firefox所需要的所有文件、库、数据等等。要删除firefox的时候，你只需删除/opt/firefox_beta目录即可，非常简单。</p>
</li>
</ol>
<h2 id="etc文件系统"><a href="#etc文件系统" class="headerlink" title="/etc文件系统"></a>/etc文件系统</h2><blockquote>
<p>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中.   </p>
</blockquote>
<pre><code>/etc/rc或/etc/rc.d或/etc/rc?.d 启动、或改变运行级时运行的脚本或脚本的目录

/etc/passwd 用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其他信息    

/etc/fdprm 软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见 setfdprm的帮助  

/etc/fstab 指定启动时需要自动安装的文件系统列表。也包括用swapon-a启用的swap区的信息 

/etc/group 类似/etc/passwd，但说明的不是用户信息而是组的信息。包括组的各种数据    

/etc/inittabinit的配置文    

/etc/issue 包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内容由系统管理员确定    

/etc/magic “file”的配置文件。包含不同文件格式的说明，“file”基于它猜测文件类型    

/etc/motdmotd 是message of theday的缩写，用户成功登录后自动输出。内容由系统管理员确定。常用于通告信息，如计划关机时间的警告等.    

/etc/mtab 当前安装的文件系统列表。由脚本(scritp)初始化，并由mount命令自动更新。当需要一个当前安装的文件系统的列表时使用(例如df命令).   

/etc/shadow 在安装了影子(shadow)口令软件的系统上的影子口令文件。影子口令文件将    /etc/passwd文件中的加密口令移动到/etc/shadow中，而后者只对超级用户( r o o t )可读。这使破译口令更困难，以此增加系统的安全性。 

/etc/login.defs login命令的配置文件。   

/etc/printcap 类似/etc/termcap ，但针对打印机。语法不同。  

/etc/profile 、/etc/csh.login、/etc/csh.cshrc 登录或启动时bourne或cshells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。  

/etc/securetty 确认安全终端，即哪个终端允许超级用户(root)登录。一般只列出虚拟控制台，这样就不可能(至少很困难)通过调制解调器(modem)或网络闯入系统并得到超级用户特权。    

/etc/shells 列出可以使用的shell。chsh命令允许用户在本文件指定范围内改变登录的shell。提供一台机器ftp服务的服务进程ftpd检查用户shell是否列在/etc/shells 文件中，如果不是，将不允许该用户登
录。  

/etc/termcap 终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。这样，多数的程序可以在多数终端上运行。
</code></pre><h2 id="dev文件系统"><a href="#dev文件系统" class="headerlink" title="/dev文件系统"></a>/dev文件系统</h2><blockquote>
<p>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准makedev的一部分)。下面简要介绍/dev下一些常用文件。     </p>
</blockquote>
<pre><code>/dev/console  系统控制台，也就是直接和系统连接的监视器。

/dev/hdide 硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、. . . . . .；如有多个分区则依次为hda1、hda2. . . . . .

/dev/sdscsi 磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/had，而会访问/dev/sda。

/dev/fd 软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，/dev/fd1指第二个软盘，. . . . . .而/dev/fd1h1440则表示访问驱动器1中的4 . 5高密盘。

/dev/stscsi 磁带驱动器驱动程序。

/dev/tty 提供虚拟控制台支持。如:/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统的第二个虚拟控制台。

/dev/pty 提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。

/dev/ttys 计算机串行接口，对于dos来说就是“com1”口。

/dev/cua 计算机串行接口，与调制解调器一起使用的设备。

/dev/null “黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来时，只要将输出信息输入到/dev/null中即可。
</code></pre><h2 id="usr文件系统"><a href="#usr文件系统" class="headerlink" title="/usr文件系统"></a>/usr文件系统</h2><blockquote>
<p>/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里.<br>/usr 里的所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序/usr目录下的许多内容是 可选的，但这些功能会使用户使用系统更加有效.<br>/usr可容纳许多大型的软件包和它们的配置文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。     </p>
</blockquote>
<pre><code>/usr/x11r6 包含xwindow系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，x的文件没有集成到系统中。xwindow系统是一个功能强大的图形环境，提供了大量的图形工具程序。用户如果对microsoftwindows或machintosh比较熟悉的话，就不会对xwindow系统感到束手无策了。

/usr/x386 类似/usr/x11r6，但是是专门给x11 release5的。

/usr/bin 集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。

/usr/sbin包括了根文件系统不必要的系统管理命令，例如多数服务程序。

/usr/man、/usr/info、/usr/doc  这些目录包含所有手册页、gnu信息文档和各种其他文档文件。每个联机手册的“节”都有两个子目录。例如：/usr/man/man1中包含联机手册第一节的源码(没有格式化的原始文件)，/usr/man/cat1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。

/usr/include  包含了c语言的头文件，这些文件多以.h结尾，用来描述c语言程序中用到的数据结构、子过程和常量。为了保持一致性，这实际上应该放在/usr/lib下，但习惯上一直沿用了这个名字。

/usr/lib 包含了程序或子系统的不变的数据文件，包括一些site-wide配置文件。名字lib来源于库(library);编程的原始库也存在/usr/lib里。当编译程序时，程序便会和其中的库进行连接。也有许多程序把配置文件存入其中。

/usr/local本地安装的软件和其他文件放在这里。这与/usr很相似。用户可能会在这发现一些比较大的软件包，如tex、emacs等。
</code></pre><h2 id="var文件系统"><a href="#var文件系统" class="headerlink" title="/var文件系统"></a>/var文件系统</h2><blockquote>
<p>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化或扩充的。原来/var目录中有些内容是在/usr中的，但为了保持/usr目录的相对稳定，就把那些需要经常改变的目录放到/var中了。<br>每个系统是特定的，即不通过网络与其他计算机共享。下面列出一些重要的目录(一些不太重要的目录省略了)。</p>
</blockquote>
<pre><code>/var/catman  包括了格式化过的帮助(man)页。帮助页的源文件一般存在/usr/man/man中；有些man页可能有预格式化的版本，存在/usr/man/cat中。而其他的man页在第一次看时都需要格式化，格式化完的版本存在/var/man中，这样其他人再看相同的页时就无须等待格式化了。(/var/catman经常被清除，就像清除临时目录一样。)

/var/lib  存放系统正常运行时要改变的文件。

/var/local  存放/usr/local中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，即使本地安装的程序也会使用其他/var目录，例如/var/lock。

/var/lock  锁定文件。许多程序遵循在/var/lock中产生一个锁定文件的约定，以用来支持他们正在使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文件。

/var/log  各种程序的日志(log)文件，尤其是login(/var/log/wtmplog纪录所有到系统的登录和注销)和syslog(/var/log/messages纪录存储所有核心和系统程序信息)。/var/log里的文件经常不确定地增长，应该定期清除。

/var/run  保存在下一次系统引导前有效的关于系统的信息文件。例如，/var/run/utmp包含当前登录的用户的信息。

/var/spool  放置“假脱机(spool)”程序的目录，如mail、news、打印队列和其他队列工作的目录。每个不同的spool在/var/spool下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail中。

/var/tmp  比/tmp允许更大的或需要存在较长时间的临时文件。注意系统管理员可能不允许/var/tmp有很旧的文件。
</code></pre><h2 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="/proc文件系统"></a>/proc文件系统</h2><blockquote>
<p>/proc文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提供关于系统的信息。下面说明一些最重要的文件和目录(/proc文件系统在procman页中有更详细的说明)。</p>
</blockquote>
<pre><code>/proc/x 关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自己进程号的目录。

/proc/cpuinfo 存放处理器(cpu)的信息，如cpu的类型、制造商、型号和性能等。

/proc/devices 当前运行的核心配置的设备驱动的列表。

/proc/dma 显示当前使用的dma通道。

/proc/filesystems 核心配置的文件系统信息。

/proc/interrupts 显示被占用的中断信息和占用者的信息，以及被占用的数量。

/proc/ioports 当前使用的i/o端口。

/proc/kcore 系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何东西占用任何磁盘空间。)

/proc/kmsg 核心输出的消息。也会被送到syslog。

/proc/ksyms 核心符号表。

/proc/loadavg 系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。

/proc/meminfo 各种存储器使用信息，包括物理内存和交换分区(swap)。

/proc/modules 存放当前加载了哪些核心模块信息。

/proc/net 网络协议状态信息。

/proc/self 存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同的连接。这主要便于程序得到它自己的进程目录。

/proc/stat 系统的不同状态，例如，系统启动后页面发生错误的次数。

/proc/uptime 系统启动的时间长度。

/proc/version 核心版本
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.5搭建LAMP环境]]></title>
      <url>/2017/10/02/CentOS6-5%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h2><p><code># vim /etc/selinux/config</code>     </p>
<pre><code>#SELINUX=ecforcing //注释掉    
#SELINUXTYPE=targeted //注释掉
SELINUX=disabled //增加
:wq! //保存退出
</code></pre><p><code># shutdown -r now</code> //重启系统<br><a id="more"></a></p>
<h2 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h2><p><code># yum install httpd</code><br><code># /etc/init.d/httpd start</code> //启动Apache  </p>
<blockquote>
<p><strong>注:</strong>如果启动之后提示错误<br><code># vim /etc/httpd/conf/httpd.conf</code>  </p>
<blockquote>
<p>找到 #ServerName www.example.com:80<br>修改为 ServerName localhost:80 //也可以设置自己的域名<br>:wq! //保存退出<br><code># chkconfig httpd on</code> //设为开机启动<br><code># service httpd restart</code> //重启Apache  </p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p><code># yum install mysql mysql-server</code><br><code># service mysqld start</code> //启动MySQL<br><code># chkconfig mysqld on</code> //设为开机启动<br><code># cp /usr/share/mysql/my-medium.cnf /etc/my.cnf</code> //拷贝配置文件   </p>
<h3 id="设置root账号密码"><a href="#设置root账号密码" class="headerlink" title="设置root账号密码"></a>设置root账号密码</h3><p><code># mysql_secure_installation</code><br>回车,输入Y<br>输两次密码,回车<br>一路YY下去<br><code># service mysqld restart</code> //重启MySQL    </p>
<h3 id="设置MySQL密码"><a href="#设置MySQL密码" class="headerlink" title="设置MySQL密码"></a>设置MySQL密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; USE mysql;   </div><div class="line">mysql&gt; UPDATE user SET Password=PASSWORD(<span class="string">'newpassword'</span>) WHERE user=<span class="string">'root'</span>;      </div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h2 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a>Apache配置</h2><p><code># vim /etc/httpd/conf/httpd.conf</code>  </p>
<pre><code>ServerTokens OS　    #在44行 修改为：ServerTokens Prod （在出现错误页的时候不显示服务器操作系统的名称）

ServerSignature On　 #在536行 修改为：ServerSignature Off （在错误页中不显示Apache的版本）

Options Indexes FollowSymLinks　  #在331行 修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录）

#AddHandler cgi-script .cgi　  #在796行 修改为：AddHandler cgi-script .cgi .pl （允许扩展名为.pl的CGI脚本运行）

AllowOverride None　 #在338行 修改为：AllowOverride All （允许.htaccess）

AddDefaultCharset UTF-8　 #在759行 修改为：AddDefaultCharset GB2312　（添加GB2312为默认编码）

Options Indexes MultiViews FollowSymLinks  #在554行 修改为 Options MultiViews FollowSymLinks（不在浏览器上显示树状目录结构）

DirectoryIndex index.html index.html.var  #在402行 修改为：DirectoryIndex index.html index.htm Default.html Default.htm index.php Default.php index.html.var （设置默认首页文件，增加index.php）

KeepAlive Off   #在76行 修改为：KeepAlive On （允许程序性联机）

MaxKeepAliveRequests 100   #在83行 修改为：MaxKeepAliveRequests 1000 （增加同时连接数）

:wq! #保存退出  
</code></pre><p><code>service httpd restart</code><br><code>rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html</code> //删除默认测试页    </p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><code># cd /var/www/html</code><br><code>vim index.php</code>     </p>
<pre><code class="bash">&lt;?php
    phpinfo();
?&gt;
</code></pre>
<p><code>:wq!</code></p>
<h3 id="MySQL远程登录"><a href="#MySQL远程登录" class="headerlink" title="MySQL远程登录"></a>MySQL远程登录</h3><p><code>mysqld -u root -p</code><br>Enter Password:     </p>
<pre><code class="bash">mysqld&gt; grant all privileges on *.* to <span class="string">'用户名'</span>@<span class="string">'%'</span> identified by <span class="string">'密码'</span> with grant option;
</code></pre>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> MySQL </tag>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS系统下安装指定版本的PHP]]></title>
      <url>/2017/10/01/CentOS%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84PHP/</url>
      <content type="html"><![CDATA[<p>在CentOS 6.5 系统下,使用<code>yum install php</code>只会默认安装php5.3.x这个版本,所以为了安装其他版本的php我们需要添加第三方源<br><a href="https://oliverlyc.github.io/2017/10/01/CentOS%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84PHP/#升级PHP"><strong>已经安装过旧版本的请点击这里</strong></a>      </p>
<h2 id="第一步-安装remi库"><a href="#第一步-安装remi库" class="headerlink" title="第一步:安装remi库"></a>第一步:安装remi库</h2><p>（如果输入<code>vim /etc/yum.repos.d/remi.repo</code>提示创建新文件,请看此步骤）     </p>
<p>REMI仓库提供了CentOS和RHEL的核心包的更新版本,尤其是最新的PHP/MySQL系列.<br>注：不要再启用REMI仓库的时候运行<code>yum update</code>,可能会触发意外的更新.<br><a id="more"></a>       </p>
<p>在CentOS 6.x上:<br>    <code># sudo rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi</code><br>    <code># sudo rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</code><br>在CentOS 7.x上:<br>    <code># sudo rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi</code><br>    <code># sudo rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</code><br>使用<code># yum repolist disabled | grep remi</code>查看REMI仓库<br><img src="http://ox5ha61h3.bkt.clouddn.com//install_php/install_php.png" alt="img1">      </p>
<h2 id="第二步-安装PHP"><a href="#第二步-安装PHP" class="headerlink" title="第二步:安装PHP"></a>第二步:安装PHP</h2><ol>
<li>添加源<br>32位:<br> <code># wget http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.1-1.el5.rf.i386.rpm</code><br> <code># rpm -ivh rpmforge-release-0.5.1-1.el5.rf.i386.rpm</code><br>64位:<br> <code># wget http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.1-1.el5.rf.x86_64.rpm</code><br> <code># rpm -ivh rpmforge-release-0.5.1-1.el5.rf.x86_64.rpm</code> </li>
<li>使用<code>yum install php(版本号)w</code>来安装PHP </li>
</ol>
<h2 id="升级PHP"><a href="#升级PHP" class="headerlink" title="升级PHP"></a>升级PHP</h2><ol>
<li><code>yum remove php*</code>//删除旧版本PHP      </li>
<li>返回第二步    </li>
</ol>
<h2 id="第三步-配置PHP"><a href="#第三步-配置PHP" class="headerlink" title="第三步:配置PHP"></a>第三步:配置PHP</h2><pre><code>vim /etc/php.ini    
date.timezone = PRC #在946行 把前面的分号去掉，改为date.timezone = PRC   
expose_php = Off #在432行 禁止显示php版本的信息
magic_quotes_gpc = On #在745行 打开magic_quotes_gpc来防止SQL注入
short_open_tag = ON #在229行支持php短标签
display_errors = On #打开错误提示
:wq! #保存退出
重启mysql,apache      
</code></pre><h2 id="第四步-配置防火墙"><a href="#第四步-配置防火墙" class="headerlink" title="第四步:配置防火墙"></a>第四步:配置防火墙</h2><p>配置防火墙,开启80,3306端口 (<strong>注:将规则添加在默认22端口这条规则下面</strong>)   </p>
<pre><code>vi /etc/sysconfig/iptables  
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT #允许80端口通过防火墙   
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT #允许3306端口通过防火墙   
:wq #保存退出   
</code></pre><p><code>/etc/init.d/iptables restart</code> //重启防火墙使配置生效     </p>
<h2 id="第五步-安装php组件"><a href="#第五步-安装php组件" class="headerlink" title="第五步:安装php组件"></a>第五步:安装php组件</h2><pre><code>yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt
</code></pre>]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux添加环境变量]]></title>
      <url>/2017/09/30/linux%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>在Linux系统下,安装完应用程序之后,输入应用名称会提示”<strong>command not found</strong>“,为了避免每次都要打开文件夹执行程序,引入了环境变量,将路径添加到<strong>$PATH</strong>中     </p>
<ol>
<li><code># vim ~/.bashrc</code>   </li>
<li>在最后一行加入<br> <code># PATH</code><br> <code>export PATH=路径:$PATH</code>    </li>
<li>保存退出执行命令<br> <code># source ~/.bashrc</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS解决'用户不在sudoers文件中']]></title>
      <url>/2017/09/23/centOS%E8%A7%A3%E5%86%B3-%E7%94%A8%E6%88%B7%E4%B8%8D%E5%9C%A8sudoers%E6%96%87%E4%BB%B6%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>在win10安装centos6.5的虚拟机<br>使用非root账号时，使用<code>sudo</code>命令出现如下警告:<br>    不在sudoers文件中,此事将被报告.<br><a id="more"></a><br>文件路径:<em>/etc/sudoers</em><br>解决方法:   </p>
<blockquote>
<ol>
<li>使用<code>su</code>命令切换到root账号,调用CentOS自带的<code>visudo</code>命令添加账号     </li>
<li>找到 <strong>root ALL=(ALL:ALL) ALL</strong> 并在下边添加自己的账号,<strong>name ALL=(ALL:ALL) ALL</strong>    </li>
<li><code>:wq</code>保存后,即可使用<code>sudo</code>命令</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> sudo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.5安装Metasploit]]></title>
      <url>/2017/09/23/CentOS6-5%E5%AE%89%E8%A3%85Metasploit/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 网络安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务的4大特性]]></title>
      <url>/2017/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%844%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h2 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. <strong>原子性</strong></h2><pre><code>事务的所有操作,要么全部成功执行,要么全部失败,要么完全应用到数据库中,要么对数据库没有任何影响.   
</code></pre><a id="more"></a> 
<h2 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2. 一致性"></a>2. <strong>一致性</strong></h2><pre><code>  事务必须使数据库从一个一致性状态转变为另一个一致性状态,事务执行前后必须保持一致    
比如:银行转账,A转给B,但是A,B的总钱数不会变.
</code></pre><h2 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3. 隔离性"></a>3. <strong>隔离性</strong></h2><pre><code>系统保证事务不会受其他并发事务的影响,多个并发事务之间需要隔离,对于并发事务A,B,在A看来,要么B先于A开始执行,要么在A后执行,两者互不影响
</code></pre><h2 id="4-持久性"><a href="#4-持久性" class="headerlink" title="4. 持久性"></a>4. <strong>持久性</strong></h2><pre><code>事务一旦被执行,对数据库的改变是永久的,即使在执行事务的时候,数据库出现了问题,也要完全执行事务,否则会出现返回事务处理完毕,但是数据库没有执行事务的错误
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[php配置json文件]]></title>
      <url>/2017/09/16/php%E9%85%8D%E7%BD%AEjson%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="php数组数据写入json文件"><a href="#php数组数据写入json文件" class="headerlink" title="php数组数据写入json文件"></a>php数组数据写入json文件</h2><blockquote>
<p><code>&lt;?php</code><br>　　<code>$data = array</code><br>　　<code>$data[&#39;a&#39;] = &#39;test&#39;;</code><br>　　<code>$data[&#39;b&#39;] = &#39;abc&#39;;</code><br>　　<code>$json_string = json_encode($data);</code><br>     <a id="more"></a><br>　　//把PHP数组转化为json字符串<br>　　<code>file_put_contents(&#39;test.json&#39;,$json_string);</code><br>　　//写入文件<br><code>?&gt;</code>       </p>
</blockquote>
<h2 id="读取json文件数据到PHP变量中"><a href="#读取json文件数据到PHP变量中" class="headerlink" title="读取json文件数据到PHP变量中"></a>读取json文件数据到PHP变量中</h2><blockquote>
<p><code>&lt;?php</code><br>　　<code>$json_string = file_get_content(&#39;test.json&#39;);</code><br>　　//读取文件<br>　　<code>$data = json_decode($json_string,true);</code><br>　　//把json字符串转换成PHP数组<br><code>?&gt;</code></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> json </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2017/09/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>$ git log</code><br>    //查看版本<br><code>$ pwd</code><br>    //显示当前目录<br><a id="more"></a>        </p>
</blockquote>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><blockquote>
<p><code>$ mkdir &lt;repository name&gt;</code>//创建目录<br><code>$ git init</code>//将目录提交到暂存区(目录下会有一个.git文件夹)<br><code>$ git add &lt;file name&gt;</code>//将文件添加到仓库(可以添加多个)<br><code>$ git commit -m &quot;添加说明$&quot;</code>//提交到仓库<br><code>$ git status</code>//查看仓库状态<br><code>$ git diff</code>//查看修改   </p>
</blockquote>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><blockquote>
<p><code>$ git reset --hard HEAD^</code><br>    //回退到上一个版本<br><code>$ rm test.txt</code><br>    //删除工作区文件   </p>
</blockquote>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><blockquote>
<p><code>$ git remote add origin &lt;herf&gt;</code><br><code>$ git push (-u //远程库为空) origin master</code><br>    //推送本地库到远程</p>
</blockquote>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><blockquote>
<p><code>$ git clone &lt;herf&gt;</code></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/03/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
